import{r as p,o,c as r,a as s,b as e,F as c,e as n,d as t}from"./app.9ab352e8.js";import{_ as l}from"./plugin-vue_export-helper.21dcd24c.js";const i={},u=s("h1",{id:"examples",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#examples","aria-hidden":"true"},"#"),n(" Examples")],-1),d=n("Study after study shows that examples are a crucial part of learning new APIs ("),b={href:"https://www.cs.mcgill.ca/~martin/papers/software2009a.pdf",target:"_blank",rel:"noopener noreferrer"},k=n("1"),m=n(", "),h={href:"https://sigdoc.acm.org/cdq/how-developers-use-api-documentation-an-observation-study/",target:"_blank",rel:"noopener noreferrer"},g=n("2"),f=n(", "),_={href:"https://ase.cpsc.ucalgary.ca/wp-content/uploads/2018/05/A-Study-of-the-Effectiveness-of-Usage-Examples-in-REST-API-Documentation.pdf",target:"_blank",rel:"noopener noreferrer"},v=n("3"),y=n("). While certain issues, like type mismatches can be avoided by inferring examples from the JSON Schema (like the examples SwaggerUI automatically generates*), it's often a lot more intuitive if we provide certain examples ourselves."),x=s("p",null,'* Which is limited as well, i.e. patterns will be ignored, and just sending the string "string" every time is somewhat suboptimal if that string actually carries meaning.',-1),w={class:"custom-container tip"},q=s("p",{class:"custom-container-title"},"TIP",-1),I=n("tsoa does not (yet) check your JSDoc examples. Incorrect examples will not break your compilation, because OpenAPI "),U={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#fixed-fields-20",target:"_blank",rel:"noopener noreferrer"},A=n("explicitly allows anything"),S=n(". You may also just want to demonstrate tsoa's validation \u{1F60F}"),P=n("We recommend using a linter (we love "),O={href:"https://stoplight.io/p/docs/gh/stoplightio/spectral",target:"_blank",rel:"noopener noreferrer"},N=n("Spectral"),R=n(") to ensure your specifications aren't just correct, but also contain "),C=s("a",{href:"./descriptions"},"descriptions",-1),D=n(" and correct examples."),E=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"OpenAPI 2 only allows one example per model/property/parameter. If you defined more than one example in OpenAPI 2, tsoa will only apply first one as value. OpenAPI 3 examples is now supported!")],-1),F=s("h2",{id:"response-examples",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#response-examples","aria-hidden":"true"},"#"),n(" Response examples")],-1),T=n("In order to provide an example response, tsoa offers a "),j={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#example-1e",target:"_blank",rel:"noopener noreferrer"},B=s("code",null,"@Example()",-1),W=n(" Decorator."),G=t(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Providing the type you&#39;re writing the example for as a type argument <code>T</code> to</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Example</span></span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>example<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>is not necessary, but may help you catch bugs.</p></div>`,1),J=n("This decorator is used to specify a response for the default response, but you can add examples for other responses ("),V={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#response-1",target:"_blank",rel:"noopener noreferrer"},H=s("code",null,"@Response()",-1),Y=n(", used for additional responses, often caused by "),$=s("a",{href:"./error-handling#specifying-error-response-types-for-openapi"},"errors",-1),L=n(" by providing them as the third argument as well."),Q=t(`<h3 id="default-response" tabindex="-1"><a class="header-anchor" href="#default-response" aria-hidden="true">#</a> Default response</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Example</span></span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token string">&quot;52907745-7672-470e-a803-a2f8feb52944&quot;</span><span class="token punctuation">,</span>
    name<span class="token operator">:</span> <span class="token string">&quot;tsoa user&quot;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token string">&quot;hello@tsoa.com&quot;</span><span class="token punctuation">,</span>
    phoneNumbers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="additional-responses" tabindex="-1"><a class="header-anchor" href="#additional-responses" aria-hidden="true">#</a> Additional Responses</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * Add a new user. Remember that the demo API will not persist this data.
   *
   */</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">SuccessResponse</span></span><span class="token punctuation">(</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Created&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Custom success response</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Response</span></span><span class="token operator">&lt;</span>ValidateErrorJSON<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">422</span><span class="token punctuation">,</span> <span class="token string">&quot;Validation Failed&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    message<span class="token operator">:</span> <span class="token string">&quot;Validation failed&quot;</span><span class="token punctuation">,</span>
    details<span class="token operator">:</span> <span class="token punctuation">{</span>
      requestBody<span class="token operator">:</span> <span class="token punctuation">{</span>
        message<span class="token operator">:</span> <span class="token string">&quot;id is an excess property and therefore not allowed&quot;</span><span class="token punctuation">,</span>
        value<span class="token operator">:</span> <span class="token string">&quot;52907745-7672-470e-a803-a2f8feb52944&quot;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> requestBody<span class="token operator">:</span> UserCreationParams
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set return status 201</span>
    <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="parameter-examples" tabindex="-1"><a class="header-anchor" href="#parameter-examples" aria-hidden="true">#</a> Parameter examples</h2>`,5),M={class:"custom-container warning"},z=s("p",{class:"custom-container-title"},"WARNING",-1),K=s("p",null,[n("You may expect to see an example for a type reference (to a type alias, interface or a class) if you set one. However, since it'll be transformed to a reference ("),s("em",null,"$ref"),n(") to the schema, the example must be ignored, since any properties that are placed next to "),s("em",null,"$ref"),n(" (OpenAPI's mechanism to link to the UserCreationParams schema) must be ignored.")],-1),X=n("For more info, check out the relevant parts of the "),Z={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject",target:"_blank",rel:"noopener noreferrer"},ss=n("OpenAPI Specification"),ns=n(" and "),as={href:"https://tools.ietf.org/html/draft-wright-json-schema-00#section-7",target:"_blank",rel:"noopener noreferrer"},es=n("JSON Schema Core"),ts=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
  <span class="token doc-comment comment">/**
   * <span class="token keyword">@example</span> userId &quot;52907745-7672-470e-a803-a2f8feb52944&quot;
   * <span class="token keyword">@example</span> userId &quot;e77ef155-bd12-46f0-8559-bf55f6dd4c63&quot;
   */</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="model-examples" tabindex="-1"><a class="header-anchor" href="#model-examples" aria-hidden="true">#</a> Model examples</h2><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Both OpenAPI 2 and 3 supports only single example in model. If you use more than one example, it will only apply the first one.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * Stringified UUIDv4.
 * See [RFC 4112](https://tools.ietf.org/html/rfc4122)
 * <span class="token keyword">@pattern</span> [0-9A-Fa-f]<span class="token punctuation">{</span>8<span class="token punctuation">}</span>-[0-9A-Fa-f]<span class="token punctuation">{</span>4<span class="token punctuation">}</span>-4[0-9A-Fa-f]<span class="token punctuation">{</span>3<span class="token punctuation">}</span>-[89ABab][0-9A-Fa-f]<span class="token punctuation">{</span>3<span class="token punctuation">}</span>-[0-9A-Fa-f]<span class="token punctuation">{</span>12<span class="token punctuation">}</span>
 * <span class="token keyword">@example</span> &quot;52907745-7672-470e-a803-a2f8feb52944&quot;
 */</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token constant">UUID</span></span> <span class="token operator">=</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line">\xA0</div><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Any example with object or array should be in correct JSON-format. Otherwise, tsoa will throws error while generating OAS.</p></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token doc-comment comment">/**
 * User objects allow you to associate actions performed in the system with the user that performed them.
 * The User object contains common information across every user in the system regardless of status and role.
 *
 *
 * <span class="token keyword">@example</span> <span class="token punctuation">{</span>
 *  &quot;id&quot;: &quot;52907745-7672-470e-a803-a2f8feb52944&quot;,
 *  &quot;name&quot;: &quot;John Doe&quot;,
 *  &quot;phoneNumbers&quot;: []
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * The email the user used to register his account
   */</span>
  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>
  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><br><br><br><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h2 id="property-examples" tabindex="-1"><a class="header-anchor" href="#property-examples" aria-hidden="true">#</a> Property examples</h2>`,7),ps={class:"custom-container warning"},os=s("p",{class:"custom-container-title"},"WARNING",-1),rs=s("p",null,[n("You may expect to see an example for the "),s("code",null,"id"),n(" if you set one. However, since it'll be transformed to a reference to the UUID schema, the example must be ignored, since any properties that are placed next to "),s("em",null,"$ref"),n(" (OpenAPI's mechanism to link to the UUID schema) must be ignored.")],-1),cs=n("For more info, check out the relevant parts of the "),ls={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#schemaObject",target:"_blank",rel:"noopener noreferrer"},is=n("OpenAPI Specification"),us=n(" and "),ds={href:"https://tools.ietf.org/html/draft-wright-json-schema-00#section-7",target:"_blank",rel:"noopener noreferrer"},bs=n("JSON Schema Core"),ks=t(`<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token constant">UUID</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * The email the user used to register his account
   */</span>
  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>

  <span class="token doc-comment comment">/**
   * <span class="token keyword">@example</span> &quot;Happy&quot;
   */</span>
  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>

  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div>`,1);function ms(hs,gs){const a=p("ExternalLinkIcon");return o(),r(c,null,[u,s("p",null,[d,s("a",b,[k,e(a)]),m,s("a",h,[g,e(a)]),f,s("a",_,[v,e(a)]),y]),x,s("div",w,[q,s("p",null,[I,s("a",U,[A,e(a)]),S]),s("p",null,[P,s("a",O,[N,e(a)]),R,C,D])]),E,F,s("p",null,[T,s("a",j,[B,e(a)]),W]),G,s("p",null,[J,s("a",V,[H,e(a)]),Y,$,L]),Q,s("div",M,[z,K,s("p",null,[X,s("a",Z,[ss,e(a)]),ns,s("a",as,[es,e(a)])])]),ts,s("div",ps,[os,rs,s("p",null,[cs,s("a",ls,[is,e(a)]),us,s("a",ds,[bs,e(a)])])]),ks],64)}var vs=l(i,[["render",ms]]);export{vs as default};
