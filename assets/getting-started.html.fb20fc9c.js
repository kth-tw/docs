import{r,o as l,c as i,a as n,b as a,w as t,t as u,F as k,e as s,d as o}from"./app.9ab352e8.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";const b={},m=n("h1",{id:"getting-started",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#getting-started","aria-hidden":"true"},"#"),s(" Getting started")],-1),h=n("p",null,[n("strong",null,"What we will talk about:")],-1),g={class:"table-of-contents"},y=s("Initializing our project"),f=s("Configuring tsoa and typescript"),q=s("Defining our first model"),v=s("Defining a simple controller"),_=s("Creating our express server"),w=s("Building the routes file"),x=s("What's next?"),P={class:"custom-container warning"},I=n("p",{class:"custom-container-title"},"COMPATIBILITY NOTE",-1),C=s("This guide requires Node.js >= 8 and will target "),j={href:"https://expressjs.com",target:"_blank",rel:"noopener noreferrer"},U=s("express"),A=s(". We currently recommend using "),S={href:"https://yarnpkg.com/en/",target:"_blank",rel:"noopener noreferrer"},O=s("Yarn"),R=s(", npm should work but was not tested."),T=o(`<h2 id="initializing-our-project" tabindex="-1"><a class="header-anchor" href="#initializing-our-project" aria-hidden="true">#</a> Initializing our project</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token comment"># Create a new folder for our project</span>
<span class="token function">mkdir</span> tsoa-project
<span class="token builtin class-name">cd</span> tsoa-project

<span class="token comment"># Create a package.json and initialize git</span>
<span class="token function">git</span> init
<span class="token function">yarn</span> init -y

<span class="token comment"># Add our dependencies</span>
<span class="token function">yarn</span> <span class="token function">add</span> tsoa express body-parser
<span class="token function">yarn</span> <span class="token function">add</span> -D typescript @types/node @types/express @types/body-parser

<span class="token comment"># Initialize tsconfig.json</span>
<span class="token function">yarn</span> run tsc --init
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="configuring-tsoa-and-typescript" tabindex="-1"><a class="header-anchor" href="#configuring-tsoa-and-typescript" aria-hidden="true">#</a> Configuring tsoa and typescript</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// tsoa.json</span>
<span class="token punctuation">{</span>
  <span class="token string-property property">&quot;entryFile&quot;</span><span class="token operator">:</span> <span class="token string">&quot;src/app.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;noImplicitAdditionalProperties&quot;</span><span class="token operator">:</span> <span class="token string">&quot;throw-on-extras&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;controllerPathGlobs&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*Controller.ts&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;spec&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;outputDirectory&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;specVersion&quot;</span><span class="token operator">:</span> <span class="token number">3</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;routes&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&quot;routesDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>Let&#39;s take a look at what we are telling tsoa here: First, we specify where the entry point to our application will be. Most likely, this file will be called <code>index.ts</code> or <code>app.ts</code>. We will create this file in a second.</p><p>Afterwards, the <code>controllerPathGlob</code> tells tsoa where it can look for controllers so we don&#39;t manually have to import them.</p><p>Next, we tell tsoa how strict excess property checking (to use the TypeScript term) or additionalProperty checking (to use OpenAPI terminology) should be. We can choose to &quot;ignore&quot; additional Properties (the OpenAPI default), remove them during validation (&quot;silently-remove-extras&quot;), or throw an Error back to the Client (&quot;throw-on-extras&quot;). Next, we set the output directory for out OpenAPI specification (OAS) and our <code>routes.ts</code> file, which we will talk about later.</p><p>We set the <code>specVersion</code> to <code>3</code> so tsoa will generate an OpenAPI v3 specification.</p>`,8),B=s("For a full list of all the possible config, take a look at the "),D={href:"https://tsoa-community.github.io/reference/interfaces/config.html",target:"_blank",rel:"noopener noreferrer"},N=s("API Reference"),L=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>While the default ts config will work for this guide, an improved tsconfig.json would look something like this:</p><details class="custom-container details"><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">/* Basic Options */</span>
    <span class="token string-property property">&quot;incremental&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es6&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build&quot;</span><span class="token punctuation">,</span>

    <span class="token comment">/* Strict Type-Checking Options */</span>
    <span class="token string-property property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;noImplicitAny&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strictNullChecks&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strictFunctionTypes&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strictBindCallApply&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;strictPropertyInitialization&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;noImplicitThis&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;alwaysStrict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/* Additional Checks */</span>
    <span class="token string-property property">&quot;noUnusedLocals&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;noUnusedParameters&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;noImplicitReturns&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;noFallthroughCasesInSwitch&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/* Module Resolution Options */</span>
    <span class="token string-property property">&quot;moduleResolution&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;baseUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;.&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/* Experimental Options */</span>
    <span class="token string-property property">&quot;experimentalDecorators&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;emitDecoratorMetadata&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>

    <span class="token comment">/* Advanced Options */</span>
    <span class="token string-property property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></details></div><h2 id="defining-our-first-model" tabindex="-1"><a class="header-anchor" href="#defining-our-first-model" aria-hidden="true">#</a> Defining our first model</h2><p>If you already have an OpenAPI Specification, you can use existing OpenAPI tooling to generate your Models or Interfaces. Otherwise, let&#39;s define a <code>User</code> Interface in <code>src/users/user.ts</code>.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  status<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;Sad&quot;</span><span class="token punctuation">;</span>
  phoneNumbers<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>Before we start defining our Controller, it&#39;s usually a good idea to create a Service that handles interaction with our Models instead of shoving all that logic into the controller layer.</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersService.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// A post request should not contain an id.</span>
<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">UserCreationParams</span> <span class="token operator">=</span> Pick<span class="token operator">&lt;</span>User<span class="token punctuation">,</span> <span class="token string">&quot;email&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;name&quot;</span> <span class="token operator">|</span> <span class="token string">&quot;phoneNumbers&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token function">get</span><span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      id<span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">&quot;jane@doe.com&quot;</span><span class="token punctuation">,</span>
      name<span class="token operator">:</span> name <span class="token operator">??</span> <span class="token string">&quot;Jane Doe&quot;</span><span class="token punctuation">,</span>
      status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>
      phoneNumbers<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">public</span> <span class="token function">create</span><span class="token punctuation">(</span>userCreationParams<span class="token operator">:</span> UserCreationParams<span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      id<span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// Random</span>
      status<span class="token operator">:</span> <span class="token string">&quot;Happy&quot;</span><span class="token punctuation">,</span>
      <span class="token operator">...</span>userCreationParams<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><h2 id="defining-a-simple-controller" tabindex="-1"><a class="header-anchor" href="#defining-a-simple-controller" aria-hidden="true">#</a> Defining a simple controller</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/users/usersController.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>
  Body<span class="token punctuation">,</span>
  Controller<span class="token punctuation">,</span>
  Get<span class="token punctuation">,</span>
  Path<span class="token punctuation">,</span>
  Post<span class="token punctuation">,</span>
  Query<span class="token punctuation">,</span>
  Route<span class="token punctuation">,</span>
  SuccessResponse<span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;tsoa&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./user&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService<span class="token punctuation">,</span> UserCreationParams <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./usersService&quot;</span><span class="token punctuation">;</span>

<span class="token decorator"><span class="token at operator">@</span><span class="token function">Route</span></span><span class="token punctuation">(</span><span class="token string">&quot;users&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Get</span></span><span class="token punctuation">(</span><span class="token string">&quot;{userId}&quot;</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">getUser</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Path</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> userId<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>userId<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token decorator"><span class="token at operator">@</span><span class="token function">SuccessResponse</span></span><span class="token punctuation">(</span><span class="token string">&quot;201&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Created&quot;</span><span class="token punctuation">)</span> <span class="token comment">// Custom success response</span>
  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Post</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token function">createUser</span><span class="token punctuation">(</span>
    <span class="token decorator"><span class="token at operator">@</span><span class="token function">Body</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> requestBody<span class="token operator">:</span> UserCreationParams
  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">201</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// set return status 201</span>
    <span class="token keyword">new</span> <span class="token class-name">UsersService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>requestBody<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><br><br><br><br><br><br><br><br><br><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><br><br><br><div class="highlight-line">\xA0</div><div class="highlight-line">\xA0</div><br><div class="highlight-line">\xA0</div><br><br><br><br><br><br></div><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>Let&#39;s take a step back and talk about what&#39;s going on here. As you can hopefully already tell, we are defining a <code>/users/</code> route using the <code>@Route()</code> decorator above our controller class.</p>`,9),M=s("Additionally, we define 2 methods: "),W=n("code",null,"getUser",-1),E=s(" and "),z=n("code",null,"createUser",-1),F=s(". The "),G=n("code",null,"@Get()",-1),Q=s(" decorator in combination with our base route "),V=n("code",null,"/users/",-1),H=s(" will tell tsoa to invoke this method for every "),Y=n("em",null,"GET",-1),J=s(" request to "),$=s(", where "),K=n("em",null,"{userId}",-1),X=s(" is a template."),Z=o(`<div class="custom-container tip"><p class="custom-container-title">OpenAPI Path Templating</p><p>Routing in tsoa is closely mirroring OpenAPI&#39;s path templating for compatibility reasons. Path templating refers to the usage of template expressions, delimited by curly braces ({}), to mark a section of a URL path as replaceable using path parameters.</p></div><p>Under the hood, this would be like defining <code>app.get(&#39;users/:userId&#39;)</code>. While express allows you to use regex-ish route definitions, we prefer to split the routing and the validation more clearly. Because you&#39;re asking for the <em>id</em> to be a <em>number</em> by using the <code>@Path()</code> decorator with an <code>userId</code> of type number, tsoa will reject passing i.e. a <em>string</em> here. Similarly, if you want to accept a <em>string</em> with a certain pattern, you can do that using JSON Schema annotations. You can learn more about that <a href="#what-s-next">here</a>.</p><p>tsoa will allow 4 types of parameters: Path parameters (using <code>@Path()</code>), Query Parameters (<code>@Query()</code>), Header Parameters (<code>@Header()</code>) and Body Parameters (<code>@Body()</code> or individual properties using <code>@BodyProp()</code>).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If the parameter name is equal to the http message parameter, you may omit the argument to the decorators, otherwise you may provide an argument:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token string">&#39;my-query&#39;</span><span class="token punctuation">)</span> myQuery<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div></div>`,4),nn=s("A full list of all the decorators can be found "),sn={href:"https://tsoa-community.github.io/reference/modules/_tsoa_runtime.html#body-1",target:"_blank",rel:"noopener noreferrer"},an=s("here"),en=s("."),tn=o(`<div class="custom-container warning"><p class="custom-container-title">Caveat</p><p>Always use a named export (<code>export class C</code>) on the controller class in order for tsoa to correctly pick it up. Default exports (<code>export default class C</code>) are currently not supported.</p></div><h2 id="creating-our-express-server" tabindex="-1"><a class="header-anchor" href="#creating-our-express-server" aria-hidden="true">#</a> Creating our express server</h2><p>Let&#39;s now create an <code>app.ts</code> and a <code>server.ts</code> file in our source directory like this:</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/app.ts</span>
<span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> bodyParser <span class="token keyword">from</span> <span class="token string">&quot;body-parser&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> RegisterRoutes <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;../build/routes&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Use body parser to read sent json payloads</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>
  bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    extended<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">RegisterRoutes</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/server.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> app <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;./app&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="building-the-routes-file" tabindex="-1"><a class="header-anchor" href="#building-the-routes-file" aria-hidden="true">#</a> Building the routes file</h2><p>At this point you may have noticed that TypeScript will not find the <code>RegisterRoutes</code> import from <code>build/routes</code>. That&#39;s because we haven&#39;t asked tsoa to create that yet. Let&#39;s do that now:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> run tsoa routes
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Now your routes.ts file should&#39;ve been created and you can compile TypeScript and start your server:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> run tsc --outDir build --experimentalDecorators
<span class="token function">node</span> build/src/server.js
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You may want to add these scripts to your <code>package.json</code> at this point:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string-property property">&quot;main&quot;</span><span class="token operator">:</span> <span class="token string">&quot;build/src/server.js&quot;</span><span class="token punctuation">,</span>
<span class="token string-property property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token string-property property">&quot;build&quot;</span><span class="token operator">:</span> <span class="token string">&quot;tsoa spec-and-routes &amp;&amp; tsc&quot;</span><span class="token punctuation">,</span>
  <span class="token string-property property">&quot;start&quot;</span><span class="token operator">:</span> <span class="token string">&quot;node build/src/server.js&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></div><h2 id="what-s-next" tabindex="-1"><a class="header-anchor" href="#what-s-next" aria-hidden="true">#</a> What&#39;s next?</h2><ul><li>Manually invoking <code>tsc</code> and <code>tsoa routes</code> in development isn&#39;t very convenient.</li><li>Inspecting our first OpenAPI specification and supercharging our feedback loop by serving an up-to-date version of SwaggerUI during development.</li></ul><p>We can improve that using <a href="./live-reloading">live reloading</a>.</p><ul><li>Improving our response for validation errors using proper <a href="./error-handling">error handling</a></li><li>Using <a href="./descriptions">Descriptions</a>, <a href="./examples">Examples</a> and <a href="./annotations">Annotations</a> for advanced validation and better documentation</li></ul>`,15);function pn(c,on){const e=r("RouterLink"),p=r("ExternalLinkIcon");return l(),i(k,null,[m,h,n("nav",g,[n("ul",null,[n("li",null,[a(e,{to:"#initializing-our-project"},{default:t(()=>[y]),_:1})]),n("li",null,[a(e,{to:"#configuring-tsoa-and-typescript"},{default:t(()=>[f]),_:1})]),n("li",null,[a(e,{to:"#defining-our-first-model"},{default:t(()=>[q]),_:1})]),n("li",null,[a(e,{to:"#defining-a-simple-controller"},{default:t(()=>[v]),_:1})]),n("li",null,[a(e,{to:"#creating-our-express-server"},{default:t(()=>[_]),_:1})]),n("li",null,[a(e,{to:"#building-the-routes-file"},{default:t(()=>[w]),_:1})]),n("li",null,[a(e,{to:"#what-s-next"},{default:t(()=>[x]),_:1})])])]),n("div",P,[I,n("p",null,[C,n("a",j,[U,a(p)]),A,n("a",S,[O,a(p)]),R])]),T,n("p",null,[B,n("a",D,[N,a(p)])]),L,n("p",null,[M,W,E,z,F,G,Q,V,H,Y,J,n("code",null,"/users/"+u(c.userId),1),$,K,X]),Z,n("p",null,[nn,n("a",sn,[an,a(p)]),en]),tn],64)}var ln=d(b,[["render",pn]]);export{ln as default};
