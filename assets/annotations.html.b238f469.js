import{r as i,o as r,c as s,a as e,b as n,F as o,d as a,e as l}from"./app.9ab352e8.js";import{_ as c}from"./plugin-vue_export-helper.21dcd24c.js";const d={},m=a(`<h1 id="json-schema-tsoa-keyword-annotations" tabindex="-1"><a class="header-anchor" href="#json-schema-tsoa-keyword-annotations" aria-hidden="true">#</a> JSON Schema / tsoa keyword annotations</h1><p>Under the hood, OpenAPI heavily relies on JSON Schema Draft 00 for all the data model specifications. JSON Schema Draft 00 defines data types that are not implemented in TypeScript. A great example are integers. If we want to communicate that a number must be an integer, tsoa will specify this in the OAS and validate incoming requests against that.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>As always, <em>$ref</em> restrictions apply</p></div><p>In general, the JSDoc notation is very similar each time:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>@&lt;keyword&gt; &lt;argument&gt;* &lt;rejectionMessage&gt;?
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>For parameters, use the <code>@&lt;keyword&gt; &lt;paramName&gt; &lt;argument&gt;* &lt;rejectionMessage&gt;?</code> syntax in your JSDoc (similar to <a href="#parameter-descriptions">descriptions</a> or <a href="#parameter-examples">examples</a>)</p></div><p>Examples:</p><p><code>@isInt we would kindly ask you to provide a number here</code></p><p><code>@minLength 1 array must not be empty</code></p><p><code>@maximum headerParameter 4 number must be &lt;4</code></p><h3 id="list-of-supported-keywords-with-arguments" tabindex="-1"><a class="header-anchor" href="#list-of-supported-keywords-with-arguments" aria-hidden="true">#</a> List of supported keywords (with arguments)</h3>`,11),h={href:"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.3.md#properties",target:"_blank",rel:"noopener noreferrer"},p=l("Click here for the list of keywords supported by OpenAPI 3"),u=a('<h4 id="generic" tabindex="-1"><a class="header-anchor" href="#generic" aria-hidden="true">#</a> Generic</h4><ul><li>default</li><li>format</li></ul><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>Formats will generally not be validated, except for <code>format: date(time)</code>, which will automatically be generated for TS type <code>Date</code>.</p></div><h4 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> Date</h4><ul><li>isDateTime for setting custom error messages</li><li>isDate for setting custom error messages</li><li>minDate</li><li>maxDate</li></ul><h4 id="numeric" tabindex="-1"><a class="header-anchor" href="#numeric" aria-hidden="true">#</a> Numeric</h4><ul><li><strong>isInt (tsoa special since TS does not know integer as a type)</strong></li><li><strong>isFloat (tsoa special since TS does not know integer as a type)</strong></li><li>minimum</li><li>maximum</li></ul><h4 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> String</h4><ul><li>isString for setting custom error messages</li><li>minLength</li><li>maxLength</li><li>pattern</li></ul><h4 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h4><ul><li>isArray for setting custom error messages</li><li>minItems</li><li>maxItems</li><li>unique</li></ul><h4 id="boolean" tabindex="-1"><a class="header-anchor" href="#boolean" aria-hidden="true">#</a> Boolean</h4><ul><li>isBool for setting custom error messages</li></ul>',13);function g(f,y){const t=i("ExternalLinkIcon");return r(),s(o,null,[m,e("p",null,[e("a",h,[p,n(t)])]),u],64)}var w=c(d,[["render",g]]);export{w as default};
