import{r,o as p,c,a as n,b as e,w as o,F as l,e as s,d as i}from"./app.9ab352e8.js";import{_ as d}from"./plugin-vue_export-helper.21dcd24c.js";var u="/docs/assets/SwaggerUI.32dd25e5.png",h="/docs/assets/SwUi-Response.53baa0c7.png";const g={},m=n("h1",{id:"live-reloading",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#live-reloading","aria-hidden":"true"},"#"),s(" Live reloading")],-1),_={class:"custom-container warning"},k=n("p",{class:"custom-container-title"},"COMPATIBILITY NOTE",-1),b=s("This guide requires Node.js >= 8 and will target "),f={href:"https://expressjs.com",target:"_blank",rel:"noopener noreferrer"},w=s("express"),v=s(". We currently recommend using "),q={href:"https://yarnpkg.com/en/",target:"_blank",rel:"noopener noreferrer"},x=s("Yarn"),y=s(", npm should work but was not tested. We assume your setup is similar to the one recommended for "),I={href:"/getting-started",target:"_blank",rel:"noopener noreferrer"},S=s("getting started"),R={class:"custom-container tip"},j=n("p",{class:"custom-container-title"},"TIP",-1),E=s("We will use "),U={href:"https://nodemon.io/",target:"_blank",rel:"noopener noreferrer"},A=s("nodemon"),T=s(" and "),N={href:"https://github.com/TypeStrong/ts-node",target:"_blank",rel:"noopener noreferrer"},L=s("ts-node"),C=s(" for live reloading, but any tool that allows us to hook into the reloading process will do. Alternatives may, i.e. be a combination of "),O=n("code",null,"tsc -w",-1),P=s(" and triggering "),W=n("code",null,"tsoa spec-and-routes",-1),B=s(" using "),D={href:"https://www.npmjs.com/package/onchange",target:"_blank",rel:"noopener noreferrer"},V=n("code",null,"onchange",-1),F=s("."),M=n("p",null,[n("strong",null,"What we will talk about:")],-1),Y={class:"table-of-contents"},G=s("Reloading Code"),H=s("Installing nodemon and ts-node"),J=s("Creating a nodemon config"),z=s("Adding a dev script"),K=s("Supercharging our developer experience with SwaggerUI \u{1F680}"),Q=s("Installing Swagger UI Express"),X=s("Exposing a /doc endpoint"),Z=s("Inspecting the Documentation"),$=s("Sending Request through SwaggerUI"),nn=i(`<h2 id="reloading-code" tabindex="-1"><a class="header-anchor" href="#reloading-code" aria-hidden="true">#</a> Reloading Code</h2><h3 id="installing-nodemon-and-ts-node" tabindex="-1"><a class="header-anchor" href="#installing-nodemon-and-ts-node" aria-hidden="true">#</a> Installing nodemon and ts-node</h3><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> -D nodemon ts-node concurrently
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="creating-a-nodemon-config" tabindex="-1"><a class="header-anchor" href="#creating-a-nodemon-config" aria-hidden="true">#</a> Creating a nodemon config</h3><p>Now, let&#39;s create a <code>nodemon.json</code> inside the root folder of our project that looks like this:</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;exec&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts-node src/server.ts&quot;</span><span class="token punctuation">,</span>
  <span class="token property">&quot;watch&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  <span class="token property">&quot;ext&quot;</span><span class="token operator">:</span> <span class="token string">&quot;ts&quot;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="adding-a-dev-script" tabindex="-1"><a class="header-anchor" href="#adding-a-dev-script" aria-hidden="true">#</a> Adding a dev script</h3><p>Let&#39;s automatically start this setup with <code>yarn run dev</code>, and, while we&#39;re at it, a <code>build</code> and a <code>start</code> command in our <code>package.json</code>:</p><div class="language-diff ext-diff line-numbers-mode"><pre class="language-diff"><code>{
<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;name&quot;: &quot;starter&quot;,
</span><span class="token prefix unchanged"> </span><span class="token line"> &quot;version&quot;: &quot;0.0.1&quot;,
</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line"> &quot;scripts&quot;: {
</span><span class="token prefix inserted">+</span><span class="token line">   &quot;dev&quot;: &quot;concurrently \\&quot;nodemon\\&quot; \\&quot;nodemon -x tsoa spec-and-routes\\&quot;&quot;,
</span><span class="token prefix inserted">+</span><span class="token line">   &quot;build&quot;: &quot;tsoa spec-and-routes &amp;&amp; tsc&quot;,
</span><span class="token prefix inserted">+</span><span class="token line">   &quot;start&quot;: &quot;node build/src/server.js&quot;
</span><span class="token prefix inserted">+</span><span class="token line"> },
</span></span><span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line"> &quot;dependencies&quot;: {
</span><span class="token prefix unchanged"> </span><span class="token line"> // ...
</span></span>}
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="supercharging-our-developer-experience-with-swaggerui" tabindex="-1"><a class="header-anchor" href="#supercharging-our-developer-experience-with-swaggerui" aria-hidden="true">#</a> Supercharging our developer experience with SwaggerUI \u{1F680}</h2>`,10),sn={href:"https://swagger.io/tools/swagger-ui/",target:"_blank",rel:"noopener noreferrer"},en=s("SwaggerUI"),an=s(" is a great tool to inspect our OAS and the requests our server can handle."),tn=s("While other great tools like "),on={href:"https://github.com/Redocly/redoc",target:"_blank",rel:"noopener noreferrer"},rn=s("Redoc"),pn=s(' serve beautiful documentation, a major upside of using SwaggerUI during development is the instant feedback via the "Try it out" feature.'),cn=i(`<p>In order to make sure we always get the latest documentation during <em>development</em>, we will import the latest OAS file (<em>build/swagger.json</em>) every time someone hits that endpoint.</p><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>For performance reasons, importing the contents of the OAS file only once after starting the application is recommended in <em>production</em>.</p></div><h3 id="installing-swagger-ui-express" tabindex="-1"><a class="header-anchor" href="#installing-swagger-ui-express" aria-hidden="true">#</a> Installing Swagger UI Express</h3><p>This module allows you to serve auto-generated swagger-ui generated API docs from express, based on our OAS file. The result is living documentation for your API hosted from your API server via a route.</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> swagger-ui-express
<span class="token function">yarn</span> <span class="token function">add</span> -D @types/swagger-ui-express
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="exposing-a-doc-endpoint" tabindex="-1"><a class="header-anchor" href="#exposing-a-doc-endpoint" aria-hidden="true">#</a> Exposing a <code>/doc</code> endpoint</h3><p>Below the body-parser, let&#39;s add another handler <strong>before the call to <code>RegisterRoutes(app)</code></strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// src/app.ts</span>

<span class="token keyword">import</span> express<span class="token punctuation">,</span> <span class="token punctuation">{</span> Response <span class="token keyword">as</span> ExResponse<span class="token punctuation">,</span> Request <span class="token keyword">as</span> ExRequest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;express&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> swaggerUi <span class="token keyword">from</span> <span class="token string">&quot;swagger-ui-express&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// ...</span>

app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">&quot;/docs&quot;</span><span class="token punctuation">,</span> swaggerUi<span class="token punctuation">.</span>serve<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>_req<span class="token operator">:</span> ExRequest<span class="token punctuation">,</span> res<span class="token operator">:</span> ExResponse<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>
    swaggerUi<span class="token punctuation">.</span><span class="token function">generateHTML</span><span class="token punctuation">(</span><span class="token keyword">await</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;../build/swagger.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>In order to dynamically import json files, set</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;resolveJsonModule&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>in your <code>tsconfig.json</code> file.</p></div><h3 id="inspecting-the-documentation" tabindex="-1"><a class="header-anchor" href="#inspecting-the-documentation" aria-hidden="true">#</a> Inspecting the Documentation</h3>`,10),ln=s("Now, when we navigate to "),dn={href:"http://localhost:3000/docs",target:"_blank",rel:"noopener noreferrer"},un=s("localhost:3000/docs"),hn=s(", we should see a current reflection of our API."),gn=n("p",null,[n("img",{src:u,alt:"SwaggerUI"})],-1),mn=n("h3",{id:"sending-request-through-swaggerui",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#sending-request-through-swaggerui","aria-hidden":"true"},"#"),s(" Sending Request through SwaggerUI")],-1),_n=n("p",null,'We can select Endponts, click the "Try it out" button and submit some data by filling out the form. When we hit "Execute", that request will be sent to our server and the response will be displayed below the form.',-1),kn=n("p",null,[n("img",{src:h,alt:"SwaggerUI Response"})],-1);function bn(fn,wn){const a=r("ExternalLinkIcon"),t=r("RouterLink");return p(),c(l,null,[m,n("div",_,[k,n("p",null,[b,n("a",f,[w,e(a)]),v,n("a",q,[x,e(a)]),y,n("a",I,[S,e(a)])])]),n("div",R,[j,n("p",null,[E,n("a",U,[A,e(a)]),T,n("a",N,[L,e(a)]),C,O,P,W,B,n("a",D,[V,e(a)]),F])]),M,n("nav",Y,[n("ul",null,[n("li",null,[e(t,{to:"#reloading-code"},{default:o(()=>[G]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#installing-nodemon-and-ts-node"},{default:o(()=>[H]),_:1})]),n("li",null,[e(t,{to:"#creating-a-nodemon-config"},{default:o(()=>[J]),_:1})]),n("li",null,[e(t,{to:"#adding-a-dev-script"},{default:o(()=>[z]),_:1})])])]),n("li",null,[e(t,{to:"#supercharging-our-developer-experience-with-swaggerui"},{default:o(()=>[K]),_:1}),n("ul",null,[n("li",null,[e(t,{to:"#installing-swagger-ui-express"},{default:o(()=>[Q]),_:1})]),n("li",null,[e(t,{to:"#exposing-a-doc-endpoint"},{default:o(()=>[X]),_:1})]),n("li",null,[e(t,{to:"#inspecting-the-documentation"},{default:o(()=>[Z]),_:1})]),n("li",null,[e(t,{to:"#sending-request-through-swaggerui"},{default:o(()=>[$]),_:1})])])])])]),nn,n("p",null,[n("a",sn,[en,e(a)]),an]),n("p",null,[tn,n("a",on,[rn,e(a)]),pn]),cn,n("p",null,[ln,n("a",dn,[un,e(a)]),hn]),gn,mn,_n,kn],64)}var xn=d(g,[["render",bn]]);export{xn as default};
